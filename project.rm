Title
========================================================

This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).

When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r}
library(caret)
pml.training <- read.csv("C:/Users/BenBen/Documents/Google Drive/coursera-Data Science Specialization/08_PracticalMachineLearning/project/pml-training.csv", na.strings = c("NA", ""))
pml.testing <- read.csv("C:/Users/BenBen/Documents/Google Drive/coursera-Data Science Specialization/08_PracticalMachineLearning/project/pml-testing.csv", na.strings = c("NA", ""))
classe=pml.training$classe
```

The basic preprocessing

```{r fig.width=7, fig.height=6}
### basic
#1 remove irrelevant
rIndex <- grep("X|user_name|cvtd_timestamp", names(pml.training))
pml.training <- pml.training[, -rIndex]
#2 remove zero var
nzv <- nearZeroVar(pml.training)
pml.training <- pml.training[, -nzv]
#3 remove na
NAs <- apply(pml.training, 2, function(x) {
  sum(is.na(x))
})
pml.training <- pml.training[, which(NAs == 0)]
pml.training0=pml.training
#4 factor to dummy **don't need
```

The advanced preprocessing (which is not used as they don't improve the prediction accuracy)
```
### extra
#1 impute
preObj <- preProcess(pml.training[,-56],method="medianImpute")
pml.training<- predict(preObj,pml.training[,-56])
pml.training1=cbind(pml.training,classe) #best
#2 standardize
stdize=preProcess(pml.training[,-56],method=c("center","scale"))
pml.training=predict(stdize,pml.training[,-56])
pml.training2=cbind(pml.training,classe)
## check corr
M <- abs(cor(pml.training))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
which(M > 0.9,arr.ind=T)
#3 pca
pca<- preProcess(pml.training,method="pca",thresh=0.9)
pml.training_=predict(pca,pml.training)
pml.training3=cbind(pml.training_,classe)
```
Here is the main model part. I used the two best performing models RF and GBM.
```
### model
set.seed(12345)
inTrain = createDataPartition(pml.training0$classe,p=3/4,list = FALSE)
pml.train<- pml.training0[inTrain, ]  
pml.test <- pml.training0[-inTrain,]  
modFit1<-train(pml.train$classe~.,data=pml.train,method="rf")
modFit2<-train(pml.train$classe~.,data=pml.train,method="gbm")
```
